// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppMLPACK.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// coverTreeNeighbor
List coverTreeNeighbor(const arma::mat& dataset, const int k);
RcppExport SEXP RcppMLPACK_coverTreeNeighbor(SEXP datasetSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(coverTreeNeighbor(dataset, k));
    return rcpp_result_gen;
END_RCPP
}
// kMeans
Rcpp::List kMeans(const arma::mat& data, const int& clusters);
RcppExport SEXP RcppMLPACK_kMeans(SEXP dataSEXP, SEXP clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int& >::type clusters(clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(kMeans(data, clusters));
    return rcpp_result_gen;
END_RCPP
}
// LARS
Rcpp::List LARS(arma::mat& matX, arma::mat& matY, const arma::mat& testPoints, const double lambda1, const double lambda2, bool useCholesky);
RcppExport SEXP RcppMLPACK_LARS(SEXP matXSEXP, SEXP matYSEXP, SEXP testPointsSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP useCholeskySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type matX(matXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type matY(matYSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type testPoints(testPointsSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< bool >::type useCholesky(useCholeskySEXP);
    rcpp_result_gen = Rcpp::wrap(LARS(matX, matY, testPoints, lambda1, lambda2, useCholesky));
    return rcpp_result_gen;
END_RCPP
}
// logisticRegression
Rcpp::List logisticRegression(const arma::mat& train, const arma::irowvec& labels, const Rcpp::Nullable<Rcpp::NumericMatrix>& test);
RcppExport SEXP RcppMLPACK_logisticRegression(SEXP trainSEXP, SEXP labelsSEXP, SEXP testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::irowvec& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type test(testSEXP);
    rcpp_result_gen = Rcpp::wrap(logisticRegression(train, labels, test));
    return rcpp_result_gen;
END_RCPP
}
// naiveBayesClassifier
Rcpp::List naiveBayesClassifier(const arma::mat& train, const arma::irowvec& labels, const int& classes, const Rcpp::Nullable<Rcpp::NumericMatrix>& test);
RcppExport SEXP RcppMLPACK_naiveBayesClassifier(SEXP trainSEXP, SEXP labelsSEXP, SEXP classesSEXP, SEXP testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::irowvec& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< const int& >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type test(testSEXP);
    rcpp_result_gen = Rcpp::wrap(naiveBayesClassifier(train, labels, classes, test));
    return rcpp_result_gen;
END_RCPP
}
