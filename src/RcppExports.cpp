// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppMLPACK.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// coverTreeNeighbor
List coverTreeNeighbor(const arma::mat& dataset, const int k);
RcppExport SEXP RcppMLPACK_coverTreeNeighbor(SEXP datasetSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(coverTreeNeighbor(dataset, k));
    return rcpp_result_gen;
END_RCPP
}
// kmeans
Rcpp::List kmeans(const arma::mat& data, const int& clusters);
RcppExport SEXP RcppMLPACK_kmeans(SEXP dataSEXP, SEXP clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int& >::type clusters(clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans(data, clusters));
    return rcpp_result_gen;
END_RCPP
}
// logisticRegression
arma::irowvec logisticRegression(const arma::mat& train, const arma::mat& test, const arma::irowvec& labels);
RcppExport SEXP RcppMLPACK_logisticRegression(SEXP trainSEXP, SEXP testSEXP, SEXP labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type test(testSEXP);
    Rcpp::traits::input_parameter< const arma::irowvec& >::type labels(labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(logisticRegression(train, test, labels));
    return rcpp_result_gen;
END_RCPP
}
// logisticRegressionParameters
arma::vec logisticRegressionParameters(const arma::mat& train, const arma::irowvec& labels);
RcppExport SEXP RcppMLPACK_logisticRegressionParameters(SEXP trainSEXP, SEXP labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::irowvec& >::type labels(labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(logisticRegressionParameters(train, labels));
    return rcpp_result_gen;
END_RCPP
}
// naiveBayesClassifier
arma::irowvec naiveBayesClassifier(const arma::mat& train, const arma::mat& test, const arma::irowvec& labels, const int& classes);
RcppExport SEXP RcppMLPACK_naiveBayesClassifier(SEXP trainSEXP, SEXP testSEXP, SEXP labelsSEXP, SEXP classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type train(trainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type test(testSEXP);
    Rcpp::traits::input_parameter< const arma::irowvec& >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< const int& >::type classes(classesSEXP);
    rcpp_result_gen = Rcpp::wrap(naiveBayesClassifier(train, test, labels, classes));
    return rcpp_result_gen;
END_RCPP
}
