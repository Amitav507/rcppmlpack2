./methods/rann/ra_search_rules_impl.hpp:  //Log::Assert(alpha <= 1.0);
./methods/range_search/range_search_rules_impl.hpp://    Log::Warn << "base case 0 0 called!\n";
./methods/radical/radical.cpp:    Log::Info << "RADICAL: sweep " << sweepNum << "." << std::endl;
./methods/radical/radical.cpp:        Log::Debug << "RADICAL 2D on dimensions " << i << " and " << j << "."
./methods/nca/nca_softmax_error_function_impl.hpp:    Log::Warn << "Denominator of p_" << i << " is 0!" << std::endl;
./methods/nca/nca_softmax_error_function_impl.hpp:    Log::Warn << "Denominator of p_" << i << " is 0!" << std::endl;
./methods/nca/nca_softmax_error_function_impl.hpp:      Log::Debug << "Denominator of p_{" << i << ", j} is 0." << std::endl;
./methods/naive_bayes/naive_bayes_classifier_impl.hpp:  Log::Info << "Training Naive Bayes classifier on " << data.n_cols
./methods/naive_bayes/naive_bayes_classifier_impl.hpp:  Log::Assert(data.n_rows == means.n_rows);
./methods/naive_bayes/naive_bayes_classifier_impl.hpp:  Log::Info << "Running Naive Bayes classifier on " << data.n_cols
./methods/fastmks/fastmks_impl.hpp:  Log::Warn << "Alternate implementation!" << std::endl;
./methods/fastmks/fastmks_impl.hpp:      Log::Assert(nextFrame.eval <= 1);
./methods/fastmks/fastmks_impl.hpp:  Log::Fatal << "Dual-tree search not implemented yet... oops..." << std::endl;
./methods/gmm/em_fit_impl.hpp:  Log::Debug << "EMFit::Estimate(): initial clustering log-likelihood: "
./methods/gmm/em_fit_impl.hpp:    Log::Info << "EMFit::Estimate(): iteration " << iteration << ", "
./methods/gmm/em_fit_impl.hpp:  Log::Debug << "EMFit::Estimate(): initial clustering log-likelihood: "
./methods/gmm/em_fit_impl.hpp:      Log::Info << "Likelihood of point " << j << " is 0!  It is probably an "
./methods/gmm/gmm.hpp:    Log::Debug << "GMM::GMM(): no parameters given; Estimate() may fail "
./methods/gmm/eigenvalue_ratio_constraint.hpp:      Log::Fatal << "EigenvalueRatioConstraint::EigenvalueRatioConstraint(): "
./methods/gmm/eigenvalue_ratio_constraint.hpp:        Log::Fatal << "EigenvalueRatioConstraint::EigenvalueRatioConstraint(): "
./methods/gmm/eigenvalue_ratio_constraint.hpp:        Log::Warn << "EigenvalueRatioConstraint::EigenvalueRatioConstraint(): "
./methods/gmm/positive_definite_constraint.hpp:      Log::Debug << "Covariance matrix is not positive definite.  Adding "
./methods/emst/dtb_rules_impl.hpp:      Log::Assert(queryIndex != referenceIndex);
./methods/emst/dtb_rules_impl.hpp:  Log::Assert(newUpperBound >= 0.0);
./methods/emst/edge_pair.hpp:    Log::Assert(lesser != greater,
./methods/emst/dtb_impl.hpp:  //Log::Assert((distance >= 0.0),
./methods/emst/dtb_impl.hpp:  //Log::Assert(edges.size() == data.n_cols - 1);
./methods/emst/dtb_impl.hpp:        //Log::Assert(tree->Stat().ComponentMembership() < 0);
./core/kernels/pspectrum_string_kernel.cpp:  Log::Info << "Assembling counts of substrings of length " << p << "."
./core/kernels/pspectrum_string_kernel.cpp:  Log::Info << "Substring extraction complete." << std::endl;
./core/optimizers/lbfgs/lbfgs_impl.hpp:    Log::Warn << "L-BFGS line search direction is not a descent direction "
./core/optimizers/lbfgs/lbfgs_impl.hpp:    Log::Debug << "L-BFGS iteration " << itNum << "; objective " <<
./core/optimizers/lbfgs/lbfgs_impl.hpp:      Log::Debug << "L-BFGS gradient norm too small (terminating successfully)."
./core/optimizers/lbfgs/lbfgs_impl.hpp:      Log::Debug << "Line search failed.  Stopping optimization." << std::endl;
./core/optimizers/lbfgs/lbfgs_impl.hpp:      Log::Debug << "L-BFGS step size of 0 (terminating successfully)."
./core/optimizers/lrsdp/lrsdp_impl.hpp:  Log::Fatal << "LRSDP::Gradient() called!  Uh-oh..." << std::endl;
./core/optimizers/lrsdp/lrsdp_impl.hpp:  Log::Fatal << "LRSDP::GradientConstraint() called!  Uh-oh..." << std::endl;
./core/optimizers/sgd/sgd_impl.hpp:      Log::Info << "SGD: iteration " << i << ", objective " << overallObjective
./core/optimizers/sgd/sgd_impl.hpp:        Log::Warn << "SGD: converged to " << overallObjective << "; terminating"
./core/optimizers/sgd/sgd_impl.hpp:        Log::Info << "SGD: minimized within tolerance " << tolerance << "; "
./core/optimizers/sgd/sgd_impl.hpp:  Log::Info << "SGD: maximum iterations (" << maxIterations << ") reached; "
./core/dists/gaussian_distribution.cpp:    Log::Debug << "GaussianDistribution::Estimate(): Covariance matrix is not "
./core/dists/gaussian_distribution.cpp:    Log::Debug << "GaussianDistribution::Estimate(): Covariance matrix is not "
./core/util/nulloutstream.hpp: * Used for Log::Debug when not compiled with debugging symbols.  This class
./core/util/save_restore_utility_impl.hpp:    Log::Fatal << "LoadParameter(): node '" << name << "' not found.\n";
./core/util/save_restore_utility_impl.hpp:    Log::Fatal << "LoadParameter(): node '" << name << "' not found.\n";
./core/util/save_restore_utility.cpp:    Log::Fatal << "Could not load XML file '" << filename << "'!" << std::endl;
./core/util/save_restore_utility.cpp:    Log::Fatal << "LoadParameter(): node '" << name << "' not found.\n";
./core/util/save_restore_utility.cpp:    Log::Fatal << "LoadParameter(): node '" << name << "' not found.\n";
./core/util/save_restore_utility.cpp:    Log::Fatal << "LoadParameter(): node '" << name << "' not found.\n";
./core/tree/cover_tree/cover_tree_impl.hpp:  //Log::Assert(originalSum == (nearSetSize + farSetSize + usedSetSize));
./core/tree/cover_tree/dual_tree_traverser_impl.hpp:  //Log::Assert((*referenceMap.begin()).first == INT_MIN);
./core/tree/cover_tree/dual_tree_traverser_impl.hpp:  //Log::Assert(queryNode.Scale() == INT_MIN);
./core/tree/periodichrectbound_impl.hpp:  //Log::Assert(point.n_elem == dim);
./core/tree/periodichrectbound_impl.hpp:  //Log::Assert(dim == other.dim);
./core/tree/periodichrectbound_impl.hpp:  //Log::Assert(vector.n_elem == dim);
./core/tree/periodichrectbound_impl.hpp:  //Log::Assert(other.dim == dim);
