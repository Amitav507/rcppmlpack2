./methods/sparse_coding/sparse_coding_impl.hpp:  //Timer::Start("sparse_coding");
./methods/sparse_coding/sparse_coding_impl.hpp:  //Timer::Stop("sparse_coding");
./methods/rann/ra_search_rules_impl.hpp:  Timer::Start("computing_number_of_samples_reqd");
./methods/rann/ra_search_rules_impl.hpp:  Timer::Stop("computing_number_of_samples_reqd");
./methods/rann/ra_search_impl.hpp:  Timer::Start("tree_building");
./methods/rann/ra_search_impl.hpp:  Timer::Stop("tree_building");
./methods/rann/ra_search_impl.hpp:  Timer::Start("tree_building");
./methods/rann/ra_search_impl.hpp:  Timer::Stop("tree_building");
./methods/rann/ra_search_impl.hpp:  Timer::Start("computing_neighbors");
./methods/rann/ra_search_impl.hpp:  Timer::Stop("computing_neighbors");
./methods/local_coordinate_coding/lcc_impl.hpp:  Timer::Start("local_coordinate_coding");
./methods/local_coordinate_coding/lcc_impl.hpp:  Timer::Stop("local_coordinate_coding");
./methods/pca/pca.cpp:  Timer::Start("pca");
./methods/pca/pca.cpp:  Timer::Stop("pca");
./methods/lsh/lsh_search_impl.hpp:  Timer::Start("computing_neighbors");
./methods/lsh/lsh_search_impl.hpp:  Timer::Stop("computing_neighbors");
./methods/range_search/range_search_impl.hpp:  //Timer::Start("range_search/tree_building");
./methods/range_search/range_search_impl.hpp:  //Timer::Stop("range_search/tree_building");
./methods/range_search/range_search_impl.hpp:  //Timer::Start("range_search/tree_building");
./methods/range_search/range_search_impl.hpp:  //Timer::Stop("range_search/tree_building");
./methods/range_search/range_search_impl.hpp:  //Timer::Start("range_search/computing_neighbors");
./methods/range_search/range_search_impl.hpp:  //Timer::Stop("range_search/computing_neighbors");
./methods/radical/radical.cpp:  Timer::Start("radical_copy_and_perturb");
./methods/radical/radical.cpp:  Timer::Stop("radical_copy_and_perturb");
./methods/radical/radical.cpp:  Timer::Start("radical_transpose_data");
./methods/radical/radical.cpp:  Timer::Stop("radical_transpose_data");
./methods/radical/radical.cpp:  Timer::Start("radical_whiten_data");
./methods/radical/radical.cpp:  Timer::Stop("radical_whiten_data");
./methods/radical/radical.cpp:  Timer::Start("radical_do_radical");
./methods/radical/radical.cpp:  Timer::Stop("radical_do_radical");
./methods/radical/radical.cpp:  Timer::Start("radical_transpose_data");
./methods/radical/radical.cpp:  Timer::Stop("radical_transpose_data");
./methods/nca/nca_impl.hpp:  Timer::Start("nca_sgd_optimization");
./methods/nca/nca_impl.hpp:  Timer::Stop("nca_sgd_optimization");
./methods/fastmks/fastmks_impl.hpp:  Timer::Start("tree_building");
./methods/fastmks/fastmks_impl.hpp:  Timer::Stop("tree_building");
./methods/fastmks/fastmks_impl.hpp:  Timer::Start("tree_building");
./methods/fastmks/fastmks_impl.hpp:  Timer::Stop("tree_building");
./methods/fastmks/fastmks_impl.hpp:  Timer::Start("tree_building");
./methods/fastmks/fastmks_impl.hpp:  Timer::Stop("tree_building");
./methods/fastmks/fastmks_impl.hpp:  Timer::Start("tree_building");
./methods/fastmks/fastmks_impl.hpp:  Timer::Stop("tree_building");
./methods/fastmks/fastmks_impl.hpp:  Timer::Start("computing_products");
./methods/fastmks/fastmks_impl.hpp:    Timer::Stop("computing_products");
./methods/fastmks/fastmks_impl.hpp:    Timer::Stop("computing_products");
./methods/fastmks/fastmks_impl.hpp:  Timer::Stop("computing_products");
./methods/fastmks/fastmks_impl.hpp:  Timer::Start("computing_products");
./methods/fastmks/fastmks_impl.hpp:    Timer::Stop("computing_products");
./methods/fastmks/fastmks_impl.hpp:    Timer::Stop("computing_products");
./methods/neighbor_search/neighbor_search_impl.hpp:  Timer::Start("tree_building");
./methods/neighbor_search/neighbor_search_impl.hpp:  Timer::Stop("tree_building");
./methods/neighbor_search/neighbor_search_impl.hpp:  Timer::Start("tree_building");
./methods/neighbor_search/neighbor_search_impl.hpp:  Timer::Stop("tree_building");
./methods/neighbor_search/neighbor_search_impl.hpp:  Timer::Start("tree_building");
./methods/neighbor_search/neighbor_search_impl.hpp:  Timer::Stop("tree_building");
./methods/neighbor_search/neighbor_search_impl.hpp:  Timer::Start("computing_neighbors");
./methods/neighbor_search/neighbor_search_impl.hpp:  Timer::Stop("computing_neighbors");
./methods/lars/lars.cpp:  Timer::Start("lars_regression");
./methods/lars/lars.cpp:    Timer::Stop("lars_regression");
./methods/lars/lars.cpp:  Timer::Stop("lars_regression");
./methods/emst/dtb_impl.hpp:  Timer::Start("emst/tree_building");
./methods/emst/dtb_impl.hpp:  Timer::Stop("emst/tree_building");
./methods/emst/dtb_impl.hpp:  Timer::Start("emst/mst_computation");
./methods/emst/dtb_impl.hpp:  Timer::Stop("emst/mst_computation");
./methods/logistic_regression/logistic_regression_impl.hpp:  Timer::Start("logistic_regression_optimization");
./methods/logistic_regression/logistic_regression_impl.hpp:  Timer::Stop("logistic_regression_optimization");
./methods/logistic_regression/logistic_regression_impl.hpp:  Timer::Start("logistic_regression_optimization");
./methods/logistic_regression/logistic_regression_impl.hpp:  Timer::Stop("logistic_regression_optimization");
./methods/logistic_regression/logistic_regression_impl.hpp:  Timer::Start("logistic_regression_optimization");
./methods/logistic_regression/logistic_regression_impl.hpp:  Timer::Stop("logistic_regression_optimization");
./core/data/load_impl.hpp:  Timer::Start("loading_data");
./core/data/load_impl.hpp:    Timer::Stop("loading_data");
./core/data/load_impl.hpp:    Timer::Stop("loading_data");
./core/data/load_impl.hpp:    Timer::Stop("loading_data");
./core/data/load_impl.hpp:    Timer::Stop("loading_data");
./core/data/load_impl.hpp:  Timer::Stop("loading_data");
./core/data/save_impl.hpp:  Timer::Start("saving_data");
./core/data/save_impl.hpp:    Timer::Stop("saving_data");
./core/data/save_impl.hpp:    Timer::Stop("saving_data");
./core/data/save_impl.hpp:      Timer::Stop("saving_data");
./core/data/save_impl.hpp:      Timer::Stop("saving_data");
./core/data/save_impl.hpp:  Timer::Stop("saving_data");
./core/util/timers.cpp:void Timer::Start(const std::string& name)
./core/util/timers.cpp:  CLI::GetSingleton().timer.StartTimer(name);
./core/util/timers.cpp:void Timer::Stop(const std::string& name)
./core/util/timers.cpp:  CLI::GetSingleton().timer.StopTimer(name);
./core/util/timers.cpp:timeval Timer::Get(const std::string& name)
./core/util/timers.cpp:  return CLI::GetSingleton().timer.GetTimer(name);
./core/util/timers.cpp:std::map<std::string, timeval>& Timers::GetAllTimers()
./core/util/timers.cpp:timeval Timers::GetTimer(const std::string& timerName)
./core/util/timers.cpp:void Timers::PrintTimer(const std::string& timerName)
./core/util/timers.cpp:void Timers::GetTime(timeval* tv)
./core/util/timers.cpp:void Timers::StartTimer(const std::string& timerName)
./core/util/timers.cpp:void Timers::FileTimeToTimeVal(timeval* tv)
./core/util/timers.cpp:void Timers::StopTimer(const std::string& timerName)
./core/util/timers.hpp: * Timers for MLPACK.
./core/util/timers.hpp:class Timer
./core/util/timers.hpp:class Timers
./core/util/timers.hpp:  Timers() { }
./core/util/timers.hpp:  std::map<std::string, timeval>& GetAllTimers();
./core/util/timers.hpp:  timeval GetTimer(const std::string& timerName);
./core/util/timers.hpp:  void PrintTimer(const std::string& timerName);
./core/util/timers.hpp:   * the command line.  Timers are of type timeval.  If a timer is started, then
./core/util/timers.hpp:  void StartTimer(const std::string& timerName);
./core/util/timers.hpp:  void StopTimer(const std::string& timerName);
./core/util/cli.cpp:  Timer::Stop("total_time");
./core/util/cli.cpp:    for (it = timer.GetAllTimers().begin(); it != timer.GetAllTimers().end();
./core/util/cli.cpp:      timer.PrintTimer((*it).first);
./core/util/cli.cpp:  Timer::Start("total_time");
./core/util/cli.cpp:  Timer::Start("total_time");
./core/util/cli.hpp:  Timers timer;
./core/util/cli.hpp:  //! So that Timer::Start() and Timer::Stop() can access the timer variable.
./core/util/cli.hpp:  friend class Timer;
